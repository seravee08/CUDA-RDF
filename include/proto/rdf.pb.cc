// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rdf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rdf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rdf {

namespace {

const ::google::protobuf::Descriptor* RDFParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDFParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RDFParameter_Col_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rdf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rdf_2eproto() {
  protobuf_AddDesc_rdf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rdf.proto");
  GOOGLE_CHECK(file != NULL);
  RDFParameter_descriptor_ = file->message_type(0);
  static const int RDFParameter_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_pixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_trees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, max_span_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, space_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, num_thresholds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, input_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, output_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, out_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, test_input_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, test_output_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, min_prob_),
  };
  RDFParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RDFParameter_descriptor_,
      RDFParameter::default_instance_,
      RDFParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(RDFParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDFParameter, _internal_metadata_),
      -1);
  RDFParameter_Col_descriptor_ = RDFParameter_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rdf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RDFParameter_descriptor_, &RDFParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rdf_2eproto() {
  delete RDFParameter::default_instance_;
  delete RDFParameter_reflection_;
  delete RDFParameter::_default_input_path_;
  delete RDFParameter::_default_output_path_;
  delete RDFParameter::_default_out_name_;
  delete RDFParameter::_default_test_input_path_;
  delete RDFParameter::_default_test_output_path_;
}

void protobuf_AddDesc_rdf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_rdf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trdf.proto\022\003rdf\"\267\004\n\014RDFParameter\022\031\n\nnum"
    "_images\030\001 \001(\005:\00510000\022\031\n\013num_samples\030\002 \001("
    "\005:\0042000\022\022\n\nnum_pixels\030\003 \003(\005\022$\n\005color\030\004 \003"
    "(\0162\025.rdf.RDFParameter.Col\022\025\n\tnum_trees\030\005"
    " \001(\005:\00210\022\025\n\tnum_depth\030\006 \001(\005:\00220\022\025\n\010max_s"
    "pan\030\007 \001(\005:\003200\022\027\n\nspace_size\030\010 \001(\005:\003400\022"
    "\032\n\014num_features\030\t \001(\005:\0042000\022\032\n\016num_thres"
    "holds\030\n \001(\005:\00250\022\032\n\ninput_path\030\013 \001(\t:\006./d"
    "ata\022\037\n\013output_path\030\014 \001(\t:\n./new_data\022\036\n\010"
    "out_name\030\r \001(\t:\014./forest.txt\022$\n\017test_inp"
    "ut_path\030\016 \001(\t:\013./test_data\022)\n\020test_outpu"
    "t_path\030\017 \001(\t:\017./test_new_data\022\025\n\010min_pro"
    "b\030\020 \001(\002:\0030.5\"\\\n\003Col\022\007\n\003RED\020\000\022\t\n\005GREEN\020\001\022"
    "\010\n\004BLUE\020\002\022\t\n\005BLACK\020\003\022\t\n\005WHITE\020\004\022\n\n\006YELLO"
    "W\020\005\022\n\n\006PURPLE\020\006\022\t\n\005AZURE\020\007", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rdf.proto", &protobuf_RegisterTypes);
  RDFParameter::_default_input_path_ =
      new ::std::string("./data", 6);
  RDFParameter::_default_output_path_ =
      new ::std::string("./new_data", 10);
  RDFParameter::_default_out_name_ =
      new ::std::string("./forest.txt", 12);
  RDFParameter::_default_test_input_path_ =
      new ::std::string("./test_data", 11);
  RDFParameter::_default_test_output_path_ =
      new ::std::string("./test_new_data", 15);
  RDFParameter::default_instance_ = new RDFParameter();
  RDFParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rdf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rdf_2eproto {
  StaticDescriptorInitializer_rdf_2eproto() {
    protobuf_AddDesc_rdf_2eproto();
  }
} static_descriptor_initializer_rdf_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RDFParameter_Col_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDFParameter_Col_descriptor_;
}
bool RDFParameter_Col_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RDFParameter_Col RDFParameter::RED;
const RDFParameter_Col RDFParameter::GREEN;
const RDFParameter_Col RDFParameter::BLUE;
const RDFParameter_Col RDFParameter::BLACK;
const RDFParameter_Col RDFParameter::WHITE;
const RDFParameter_Col RDFParameter::YELLOW;
const RDFParameter_Col RDFParameter::PURPLE;
const RDFParameter_Col RDFParameter::AZURE;
const RDFParameter_Col RDFParameter::Col_MIN;
const RDFParameter_Col RDFParameter::Col_MAX;
const int RDFParameter::Col_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* RDFParameter::_default_input_path_ = NULL;
::std::string* RDFParameter::_default_output_path_ = NULL;
::std::string* RDFParameter::_default_out_name_ = NULL;
::std::string* RDFParameter::_default_test_input_path_ = NULL;
::std::string* RDFParameter::_default_test_output_path_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RDFParameter::kNumImagesFieldNumber;
const int RDFParameter::kNumSamplesFieldNumber;
const int RDFParameter::kNumPixelsFieldNumber;
const int RDFParameter::kColorFieldNumber;
const int RDFParameter::kNumTreesFieldNumber;
const int RDFParameter::kNumDepthFieldNumber;
const int RDFParameter::kMaxSpanFieldNumber;
const int RDFParameter::kSpaceSizeFieldNumber;
const int RDFParameter::kNumFeaturesFieldNumber;
const int RDFParameter::kNumThresholdsFieldNumber;
const int RDFParameter::kInputPathFieldNumber;
const int RDFParameter::kOutputPathFieldNumber;
const int RDFParameter::kOutNameFieldNumber;
const int RDFParameter::kTestInputPathFieldNumber;
const int RDFParameter::kTestOutputPathFieldNumber;
const int RDFParameter::kMinProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RDFParameter::RDFParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rdf.RDFParameter)
}

void RDFParameter::InitAsDefaultInstance() {
}

RDFParameter::RDFParameter(const RDFParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rdf.RDFParameter)
}

void RDFParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_images_ = 10000;
  num_samples_ = 2000;
  num_trees_ = 10;
  num_depth_ = 20;
  max_span_ = 200;
  space_size_ = 400;
  num_features_ = 2000;
  num_thresholds_ = 50;
  input_path_.UnsafeSetDefault(_default_input_path_);
  output_path_.UnsafeSetDefault(_default_output_path_);
  out_name_.UnsafeSetDefault(_default_out_name_);
  test_input_path_.UnsafeSetDefault(_default_test_input_path_);
  test_output_path_.UnsafeSetDefault(_default_test_output_path_);
  min_prob_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDFParameter::~RDFParameter() {
  // @@protoc_insertion_point(destructor:rdf.RDFParameter)
  SharedDtor();
}

void RDFParameter::SharedDtor() {
  input_path_.DestroyNoArena(_default_input_path_);
  output_path_.DestroyNoArena(_default_output_path_);
  out_name_.DestroyNoArena(_default_out_name_);
  test_input_path_.DestroyNoArena(_default_test_input_path_);
  test_output_path_.DestroyNoArena(_default_test_output_path_);
  if (this != default_instance_) {
  }
}

void RDFParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDFParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDFParameter_descriptor_;
}

const RDFParameter& RDFParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rdf_2eproto();
  return *default_instance_;
}

RDFParameter* RDFParameter::default_instance_ = NULL;

RDFParameter* RDFParameter::New(::google::protobuf::Arena* arena) const {
  RDFParameter* n = new RDFParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RDFParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:rdf.RDFParameter)
  if (_has_bits_[0 / 32] & 243u) {
    num_images_ = 10000;
    num_samples_ = 2000;
    num_trees_ = 10;
    num_depth_ = 20;
    max_span_ = 200;
    space_size_ = 400;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    num_features_ = 2000;
    num_thresholds_ = 50;
    if (has_input_path()) {
      input_path_.ClearToDefaultNoArena(_default_input_path_);
    }
    if (has_output_path()) {
      output_path_.ClearToDefaultNoArena(_default_output_path_);
    }
    if (has_out_name()) {
      out_name_.ClearToDefaultNoArena(_default_out_name_);
    }
    if (has_test_input_path()) {
      test_input_path_.ClearToDefaultNoArena(_default_test_input_path_);
    }
    if (has_test_output_path()) {
      test_output_path_.ClearToDefaultNoArena(_default_test_output_path_);
    }
    min_prob_ = 0.5f;
  }
  num_pixels_.Clear();
  color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RDFParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rdf.RDFParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_images = 1 [default = 10000];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_images_)));
          set_has_num_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_samples;
        break;
      }

      // optional int32 num_samples = 2 [default = 2000];
      case 2: {
        if (tag == 16) {
         parse_num_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_samples_)));
          set_has_num_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_pixels;
        break;
      }

      // repeated int32 num_pixels = 3;
      case 3: {
        if (tag == 24) {
         parse_num_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_num_pixels())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num_pixels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_pixels;
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // repeated .rdf.RDFParameter.Col color = 4;
      case 4: {
        if (tag == 32) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rdf::RDFParameter_Col_IsValid(value)) {
            add_color(static_cast< ::rdf::RDFParameter_Col >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::rdf::RDFParameter_Col_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_color())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_color;
        if (input->ExpectTag(40)) goto parse_num_trees;
        break;
      }

      // optional int32 num_trees = 5 [default = 10];
      case 5: {
        if (tag == 40) {
         parse_num_trees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_trees_)));
          set_has_num_trees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_depth;
        break;
      }

      // optional int32 num_depth = 6 [default = 20];
      case 6: {
        if (tag == 48) {
         parse_num_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_depth_)));
          set_has_num_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_span;
        break;
      }

      // optional int32 max_span = 7 [default = 200];
      case 7: {
        if (tag == 56) {
         parse_max_span:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_span_)));
          set_has_max_span();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_space_size;
        break;
      }

      // optional int32 space_size = 8 [default = 400];
      case 8: {
        if (tag == 64) {
         parse_space_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_size_)));
          set_has_space_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_features;
        break;
      }

      // optional int32 num_features = 9 [default = 2000];
      case 9: {
        if (tag == 72) {
         parse_num_features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_features_)));
          set_has_num_features();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_thresholds;
        break;
      }

      // optional int32 num_thresholds = 10 [default = 50];
      case 10: {
        if (tag == 80) {
         parse_num_thresholds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_thresholds_)));
          set_has_num_thresholds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_input_path;
        break;
      }

      // optional string input_path = 11 [default = "./data"];
      case 11: {
        if (tag == 90) {
         parse_input_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_path().data(), this->input_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rdf.RDFParameter.input_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_output_path;
        break;
      }

      // optional string output_path = 12 [default = "./new_data"];
      case 12: {
        if (tag == 98) {
         parse_output_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_path().data(), this->output_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rdf.RDFParameter.output_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_out_name;
        break;
      }

      // optional string out_name = 13 [default = "./forest.txt"];
      case 13: {
        if (tag == 106) {
         parse_out_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out_name().data(), this->out_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rdf.RDFParameter.out_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_test_input_path;
        break;
      }

      // optional string test_input_path = 14 [default = "./test_data"];
      case 14: {
        if (tag == 114) {
         parse_test_input_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_input_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_input_path().data(), this->test_input_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rdf.RDFParameter.test_input_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_test_output_path;
        break;
      }

      // optional string test_output_path = 15 [default = "./test_new_data"];
      case 15: {
        if (tag == 122) {
         parse_test_output_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_output_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_output_path().data(), this->test_output_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rdf.RDFParameter.test_output_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_min_prob;
        break;
      }

      // optional float min_prob = 16 [default = 0.5];
      case 16: {
        if (tag == 133) {
         parse_min_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_prob_)));
          set_has_min_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rdf.RDFParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rdf.RDFParameter)
  return false;
#undef DO_
}

void RDFParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rdf.RDFParameter)
  // optional int32 num_images = 1 [default = 10000];
  if (has_num_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_images(), output);
  }

  // optional int32 num_samples = 2 [default = 2000];
  if (has_num_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_samples(), output);
  }

  // repeated int32 num_pixels = 3;
  for (int i = 0; i < this->num_pixels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->num_pixels(i), output);
  }

  // repeated .rdf.RDFParameter.Col color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(i), output);
  }

  // optional int32 num_trees = 5 [default = 10];
  if (has_num_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_trees(), output);
  }

  // optional int32 num_depth = 6 [default = 20];
  if (has_num_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_depth(), output);
  }

  // optional int32 max_span = 7 [default = 200];
  if (has_max_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_span(), output);
  }

  // optional int32 space_size = 8 [default = 400];
  if (has_space_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->space_size(), output);
  }

  // optional int32 num_features = 9 [default = 2000];
  if (has_num_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_features(), output);
  }

  // optional int32 num_thresholds = 10 [default = 50];
  if (has_num_thresholds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_thresholds(), output);
  }

  // optional string input_path = 11 [default = "./data"];
  if (has_input_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_path().data(), this->input_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.input_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->input_path(), output);
  }

  // optional string output_path = 12 [default = "./new_data"];
  if (has_output_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_path().data(), this->output_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.output_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->output_path(), output);
  }

  // optional string out_name = 13 [default = "./forest.txt"];
  if (has_out_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_name().data(), this->out_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.out_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->out_name(), output);
  }

  // optional string test_input_path = 14 [default = "./test_data"];
  if (has_test_input_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_input_path().data(), this->test_input_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.test_input_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->test_input_path(), output);
  }

  // optional string test_output_path = 15 [default = "./test_new_data"];
  if (has_test_output_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_output_path().data(), this->test_output_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.test_output_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->test_output_path(), output);
  }

  // optional float min_prob = 16 [default = 0.5];
  if (has_min_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->min_prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rdf.RDFParameter)
}

::google::protobuf::uint8* RDFParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdf.RDFParameter)
  // optional int32 num_images = 1 [default = 10000];
  if (has_num_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_images(), target);
  }

  // optional int32 num_samples = 2 [default = 2000];
  if (has_num_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_samples(), target);
  }

  // repeated int32 num_pixels = 3;
  for (int i = 0; i < this->num_pixels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->num_pixels(i), target);
  }

  // repeated .rdf.RDFParameter.Col color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(i), target);
  }

  // optional int32 num_trees = 5 [default = 10];
  if (has_num_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_trees(), target);
  }

  // optional int32 num_depth = 6 [default = 20];
  if (has_num_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_depth(), target);
  }

  // optional int32 max_span = 7 [default = 200];
  if (has_max_span()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_span(), target);
  }

  // optional int32 space_size = 8 [default = 400];
  if (has_space_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->space_size(), target);
  }

  // optional int32 num_features = 9 [default = 2000];
  if (has_num_features()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_features(), target);
  }

  // optional int32 num_thresholds = 10 [default = 50];
  if (has_num_thresholds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_thresholds(), target);
  }

  // optional string input_path = 11 [default = "./data"];
  if (has_input_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_path().data(), this->input_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.input_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->input_path(), target);
  }

  // optional string output_path = 12 [default = "./new_data"];
  if (has_output_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_path().data(), this->output_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.output_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->output_path(), target);
  }

  // optional string out_name = 13 [default = "./forest.txt"];
  if (has_out_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_name().data(), this->out_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.out_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->out_name(), target);
  }

  // optional string test_input_path = 14 [default = "./test_data"];
  if (has_test_input_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_input_path().data(), this->test_input_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.test_input_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->test_input_path(), target);
  }

  // optional string test_output_path = 15 [default = "./test_new_data"];
  if (has_test_output_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_output_path().data(), this->test_output_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rdf.RDFParameter.test_output_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->test_output_path(), target);
  }

  // optional float min_prob = 16 [default = 0.5];
  if (has_min_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->min_prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdf.RDFParameter)
  return target;
}

int RDFParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rdf.RDFParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 243u) {
    // optional int32 num_images = 1 [default = 10000];
    if (has_num_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_images());
    }

    // optional int32 num_samples = 2 [default = 2000];
    if (has_num_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_samples());
    }

    // optional int32 num_trees = 5 [default = 10];
    if (has_num_trees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_trees());
    }

    // optional int32 num_depth = 6 [default = 20];
    if (has_num_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_depth());
    }

    // optional int32 max_span = 7 [default = 200];
    if (has_max_span()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_span());
    }

    // optional int32 space_size = 8 [default = 400];
    if (has_space_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_size());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 num_features = 9 [default = 2000];
    if (has_num_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_features());
    }

    // optional int32 num_thresholds = 10 [default = 50];
    if (has_num_thresholds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_thresholds());
    }

    // optional string input_path = 11 [default = "./data"];
    if (has_input_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_path());
    }

    // optional string output_path = 12 [default = "./new_data"];
    if (has_output_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_path());
    }

    // optional string out_name = 13 [default = "./forest.txt"];
    if (has_out_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->out_name());
    }

    // optional string test_input_path = 14 [default = "./test_data"];
    if (has_test_input_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_input_path());
    }

    // optional string test_output_path = 15 [default = "./test_new_data"];
    if (has_test_output_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_output_path());
    }

    // optional float min_prob = 16 [default = 0.5];
    if (has_min_prob()) {
      total_size += 2 + 4;
    }

  }
  // repeated int32 num_pixels = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_pixels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num_pixels(i));
    }
    total_size += 1 * this->num_pixels_size() + data_size;
  }

  // repeated .rdf.RDFParameter.Col color = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->color_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->color(i));
    }
    total_size += 1 * this->color_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDFParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdf.RDFParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RDFParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RDFParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdf.RDFParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdf.RDFParameter)
    MergeFrom(*source);
  }
}

void RDFParameter::MergeFrom(const RDFParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdf.RDFParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  num_pixels_.MergeFrom(from.num_pixels_);
  color_.MergeFrom(from.color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_images()) {
      set_num_images(from.num_images());
    }
    if (from.has_num_samples()) {
      set_num_samples(from.num_samples());
    }
    if (from.has_num_trees()) {
      set_num_trees(from.num_trees());
    }
    if (from.has_num_depth()) {
      set_num_depth(from.num_depth());
    }
    if (from.has_max_span()) {
      set_max_span(from.max_span());
    }
    if (from.has_space_size()) {
      set_space_size(from.space_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_features()) {
      set_num_features(from.num_features());
    }
    if (from.has_num_thresholds()) {
      set_num_thresholds(from.num_thresholds());
    }
    if (from.has_input_path()) {
      set_has_input_path();
      input_path_.AssignWithDefault(_default_input_path_, from.input_path_);
    }
    if (from.has_output_path()) {
      set_has_output_path();
      output_path_.AssignWithDefault(_default_output_path_, from.output_path_);
    }
    if (from.has_out_name()) {
      set_has_out_name();
      out_name_.AssignWithDefault(_default_out_name_, from.out_name_);
    }
    if (from.has_test_input_path()) {
      set_has_test_input_path();
      test_input_path_.AssignWithDefault(_default_test_input_path_, from.test_input_path_);
    }
    if (from.has_test_output_path()) {
      set_has_test_output_path();
      test_output_path_.AssignWithDefault(_default_test_output_path_, from.test_output_path_);
    }
    if (from.has_min_prob()) {
      set_min_prob(from.min_prob());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RDFParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdf.RDFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDFParameter::CopyFrom(const RDFParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdf.RDFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDFParameter::IsInitialized() const {

  return true;
}

void RDFParameter::Swap(RDFParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RDFParameter::InternalSwap(RDFParameter* other) {
  std::swap(num_images_, other->num_images_);
  std::swap(num_samples_, other->num_samples_);
  num_pixels_.UnsafeArenaSwap(&other->num_pixels_);
  color_.UnsafeArenaSwap(&other->color_);
  std::swap(num_trees_, other->num_trees_);
  std::swap(num_depth_, other->num_depth_);
  std::swap(max_span_, other->max_span_);
  std::swap(space_size_, other->space_size_);
  std::swap(num_features_, other->num_features_);
  std::swap(num_thresholds_, other->num_thresholds_);
  input_path_.Swap(&other->input_path_);
  output_path_.Swap(&other->output_path_);
  out_name_.Swap(&other->out_name_);
  test_input_path_.Swap(&other->test_input_path_);
  test_output_path_.Swap(&other->test_output_path_);
  std::swap(min_prob_, other->min_prob_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RDFParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDFParameter_descriptor_;
  metadata.reflection = RDFParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RDFParameter

// optional int32 num_images = 1 [default = 10000];
bool RDFParameter::has_num_images() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RDFParameter::set_has_num_images() {
  _has_bits_[0] |= 0x00000001u;
}
void RDFParameter::clear_has_num_images() {
  _has_bits_[0] &= ~0x00000001u;
}
void RDFParameter::clear_num_images() {
  num_images_ = 10000;
  clear_has_num_images();
}
 ::google::protobuf::int32 RDFParameter::num_images() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_images)
  return num_images_;
}
 void RDFParameter::set_num_images(::google::protobuf::int32 value) {
  set_has_num_images();
  num_images_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_images)
}

// optional int32 num_samples = 2 [default = 2000];
bool RDFParameter::has_num_samples() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RDFParameter::set_has_num_samples() {
  _has_bits_[0] |= 0x00000002u;
}
void RDFParameter::clear_has_num_samples() {
  _has_bits_[0] &= ~0x00000002u;
}
void RDFParameter::clear_num_samples() {
  num_samples_ = 2000;
  clear_has_num_samples();
}
 ::google::protobuf::int32 RDFParameter::num_samples() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_samples)
  return num_samples_;
}
 void RDFParameter::set_num_samples(::google::protobuf::int32 value) {
  set_has_num_samples();
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_samples)
}

// repeated int32 num_pixels = 3;
int RDFParameter::num_pixels_size() const {
  return num_pixels_.size();
}
void RDFParameter::clear_num_pixels() {
  num_pixels_.Clear();
}
 ::google::protobuf::int32 RDFParameter::num_pixels(int index) const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_pixels)
  return num_pixels_.Get(index);
}
 void RDFParameter::set_num_pixels(int index, ::google::protobuf::int32 value) {
  num_pixels_.Set(index, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_pixels)
}
 void RDFParameter::add_num_pixels(::google::protobuf::int32 value) {
  num_pixels_.Add(value);
  // @@protoc_insertion_point(field_add:rdf.RDFParameter.num_pixels)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RDFParameter::num_pixels() const {
  // @@protoc_insertion_point(field_list:rdf.RDFParameter.num_pixels)
  return num_pixels_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RDFParameter::mutable_num_pixels() {
  // @@protoc_insertion_point(field_mutable_list:rdf.RDFParameter.num_pixels)
  return &num_pixels_;
}

// repeated .rdf.RDFParameter.Col color = 4;
int RDFParameter::color_size() const {
  return color_.size();
}
void RDFParameter::clear_color() {
  color_.Clear();
}
 ::rdf::RDFParameter_Col RDFParameter::color(int index) const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.color)
  return static_cast< ::rdf::RDFParameter_Col >(color_.Get(index));
}
 void RDFParameter::set_color(int index, ::rdf::RDFParameter_Col value) {
  assert(::rdf::RDFParameter_Col_IsValid(value));
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.color)
}
 void RDFParameter::add_color(::rdf::RDFParameter_Col value) {
  assert(::rdf::RDFParameter_Col_IsValid(value));
  color_.Add(value);
  // @@protoc_insertion_point(field_add:rdf.RDFParameter.color)
}
 const ::google::protobuf::RepeatedField<int>&
RDFParameter::color() const {
  // @@protoc_insertion_point(field_list:rdf.RDFParameter.color)
  return color_;
}
 ::google::protobuf::RepeatedField<int>*
RDFParameter::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:rdf.RDFParameter.color)
  return &color_;
}

// optional int32 num_trees = 5 [default = 10];
bool RDFParameter::has_num_trees() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RDFParameter::set_has_num_trees() {
  _has_bits_[0] |= 0x00000010u;
}
void RDFParameter::clear_has_num_trees() {
  _has_bits_[0] &= ~0x00000010u;
}
void RDFParameter::clear_num_trees() {
  num_trees_ = 10;
  clear_has_num_trees();
}
 ::google::protobuf::int32 RDFParameter::num_trees() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_trees)
  return num_trees_;
}
 void RDFParameter::set_num_trees(::google::protobuf::int32 value) {
  set_has_num_trees();
  num_trees_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_trees)
}

// optional int32 num_depth = 6 [default = 20];
bool RDFParameter::has_num_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RDFParameter::set_has_num_depth() {
  _has_bits_[0] |= 0x00000020u;
}
void RDFParameter::clear_has_num_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
void RDFParameter::clear_num_depth() {
  num_depth_ = 20;
  clear_has_num_depth();
}
 ::google::protobuf::int32 RDFParameter::num_depth() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_depth)
  return num_depth_;
}
 void RDFParameter::set_num_depth(::google::protobuf::int32 value) {
  set_has_num_depth();
  num_depth_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_depth)
}

// optional int32 max_span = 7 [default = 200];
bool RDFParameter::has_max_span() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RDFParameter::set_has_max_span() {
  _has_bits_[0] |= 0x00000040u;
}
void RDFParameter::clear_has_max_span() {
  _has_bits_[0] &= ~0x00000040u;
}
void RDFParameter::clear_max_span() {
  max_span_ = 200;
  clear_has_max_span();
}
 ::google::protobuf::int32 RDFParameter::max_span() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.max_span)
  return max_span_;
}
 void RDFParameter::set_max_span(::google::protobuf::int32 value) {
  set_has_max_span();
  max_span_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.max_span)
}

// optional int32 space_size = 8 [default = 400];
bool RDFParameter::has_space_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RDFParameter::set_has_space_size() {
  _has_bits_[0] |= 0x00000080u;
}
void RDFParameter::clear_has_space_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void RDFParameter::clear_space_size() {
  space_size_ = 400;
  clear_has_space_size();
}
 ::google::protobuf::int32 RDFParameter::space_size() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.space_size)
  return space_size_;
}
 void RDFParameter::set_space_size(::google::protobuf::int32 value) {
  set_has_space_size();
  space_size_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.space_size)
}

// optional int32 num_features = 9 [default = 2000];
bool RDFParameter::has_num_features() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RDFParameter::set_has_num_features() {
  _has_bits_[0] |= 0x00000100u;
}
void RDFParameter::clear_has_num_features() {
  _has_bits_[0] &= ~0x00000100u;
}
void RDFParameter::clear_num_features() {
  num_features_ = 2000;
  clear_has_num_features();
}
 ::google::protobuf::int32 RDFParameter::num_features() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_features)
  return num_features_;
}
 void RDFParameter::set_num_features(::google::protobuf::int32 value) {
  set_has_num_features();
  num_features_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_features)
}

// optional int32 num_thresholds = 10 [default = 50];
bool RDFParameter::has_num_thresholds() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RDFParameter::set_has_num_thresholds() {
  _has_bits_[0] |= 0x00000200u;
}
void RDFParameter::clear_has_num_thresholds() {
  _has_bits_[0] &= ~0x00000200u;
}
void RDFParameter::clear_num_thresholds() {
  num_thresholds_ = 50;
  clear_has_num_thresholds();
}
 ::google::protobuf::int32 RDFParameter::num_thresholds() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.num_thresholds)
  return num_thresholds_;
}
 void RDFParameter::set_num_thresholds(::google::protobuf::int32 value) {
  set_has_num_thresholds();
  num_thresholds_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.num_thresholds)
}

// optional string input_path = 11 [default = "./data"];
bool RDFParameter::has_input_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RDFParameter::set_has_input_path() {
  _has_bits_[0] |= 0x00000400u;
}
void RDFParameter::clear_has_input_path() {
  _has_bits_[0] &= ~0x00000400u;
}
void RDFParameter::clear_input_path() {
  input_path_.ClearToDefaultNoArena(_default_input_path_);
  clear_has_input_path();
}
 const ::std::string& RDFParameter::input_path() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.input_path)
  return input_path_.GetNoArena(_default_input_path_);
}
 void RDFParameter::set_input_path(const ::std::string& value) {
  set_has_input_path();
  input_path_.SetNoArena(_default_input_path_, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.input_path)
}
 void RDFParameter::set_input_path(const char* value) {
  set_has_input_path();
  input_path_.SetNoArena(_default_input_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rdf.RDFParameter.input_path)
}
 void RDFParameter::set_input_path(const char* value, size_t size) {
  set_has_input_path();
  input_path_.SetNoArena(_default_input_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rdf.RDFParameter.input_path)
}
 ::std::string* RDFParameter::mutable_input_path() {
  set_has_input_path();
  // @@protoc_insertion_point(field_mutable:rdf.RDFParameter.input_path)
  return input_path_.MutableNoArena(_default_input_path_);
}
 ::std::string* RDFParameter::release_input_path() {
  // @@protoc_insertion_point(field_release:rdf.RDFParameter.input_path)
  clear_has_input_path();
  return input_path_.ReleaseNoArena(_default_input_path_);
}
 void RDFParameter::set_allocated_input_path(::std::string* input_path) {
  if (input_path != NULL) {
    set_has_input_path();
  } else {
    clear_has_input_path();
  }
  input_path_.SetAllocatedNoArena(_default_input_path_, input_path);
  // @@protoc_insertion_point(field_set_allocated:rdf.RDFParameter.input_path)
}

// optional string output_path = 12 [default = "./new_data"];
bool RDFParameter::has_output_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RDFParameter::set_has_output_path() {
  _has_bits_[0] |= 0x00000800u;
}
void RDFParameter::clear_has_output_path() {
  _has_bits_[0] &= ~0x00000800u;
}
void RDFParameter::clear_output_path() {
  output_path_.ClearToDefaultNoArena(_default_output_path_);
  clear_has_output_path();
}
 const ::std::string& RDFParameter::output_path() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.output_path)
  return output_path_.GetNoArena(_default_output_path_);
}
 void RDFParameter::set_output_path(const ::std::string& value) {
  set_has_output_path();
  output_path_.SetNoArena(_default_output_path_, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.output_path)
}
 void RDFParameter::set_output_path(const char* value) {
  set_has_output_path();
  output_path_.SetNoArena(_default_output_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rdf.RDFParameter.output_path)
}
 void RDFParameter::set_output_path(const char* value, size_t size) {
  set_has_output_path();
  output_path_.SetNoArena(_default_output_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rdf.RDFParameter.output_path)
}
 ::std::string* RDFParameter::mutable_output_path() {
  set_has_output_path();
  // @@protoc_insertion_point(field_mutable:rdf.RDFParameter.output_path)
  return output_path_.MutableNoArena(_default_output_path_);
}
 ::std::string* RDFParameter::release_output_path() {
  // @@protoc_insertion_point(field_release:rdf.RDFParameter.output_path)
  clear_has_output_path();
  return output_path_.ReleaseNoArena(_default_output_path_);
}
 void RDFParameter::set_allocated_output_path(::std::string* output_path) {
  if (output_path != NULL) {
    set_has_output_path();
  } else {
    clear_has_output_path();
  }
  output_path_.SetAllocatedNoArena(_default_output_path_, output_path);
  // @@protoc_insertion_point(field_set_allocated:rdf.RDFParameter.output_path)
}

// optional string out_name = 13 [default = "./forest.txt"];
bool RDFParameter::has_out_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RDFParameter::set_has_out_name() {
  _has_bits_[0] |= 0x00001000u;
}
void RDFParameter::clear_has_out_name() {
  _has_bits_[0] &= ~0x00001000u;
}
void RDFParameter::clear_out_name() {
  out_name_.ClearToDefaultNoArena(_default_out_name_);
  clear_has_out_name();
}
 const ::std::string& RDFParameter::out_name() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.out_name)
  return out_name_.GetNoArena(_default_out_name_);
}
 void RDFParameter::set_out_name(const ::std::string& value) {
  set_has_out_name();
  out_name_.SetNoArena(_default_out_name_, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.out_name)
}
 void RDFParameter::set_out_name(const char* value) {
  set_has_out_name();
  out_name_.SetNoArena(_default_out_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rdf.RDFParameter.out_name)
}
 void RDFParameter::set_out_name(const char* value, size_t size) {
  set_has_out_name();
  out_name_.SetNoArena(_default_out_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rdf.RDFParameter.out_name)
}
 ::std::string* RDFParameter::mutable_out_name() {
  set_has_out_name();
  // @@protoc_insertion_point(field_mutable:rdf.RDFParameter.out_name)
  return out_name_.MutableNoArena(_default_out_name_);
}
 ::std::string* RDFParameter::release_out_name() {
  // @@protoc_insertion_point(field_release:rdf.RDFParameter.out_name)
  clear_has_out_name();
  return out_name_.ReleaseNoArena(_default_out_name_);
}
 void RDFParameter::set_allocated_out_name(::std::string* out_name) {
  if (out_name != NULL) {
    set_has_out_name();
  } else {
    clear_has_out_name();
  }
  out_name_.SetAllocatedNoArena(_default_out_name_, out_name);
  // @@protoc_insertion_point(field_set_allocated:rdf.RDFParameter.out_name)
}

// optional string test_input_path = 14 [default = "./test_data"];
bool RDFParameter::has_test_input_path() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RDFParameter::set_has_test_input_path() {
  _has_bits_[0] |= 0x00002000u;
}
void RDFParameter::clear_has_test_input_path() {
  _has_bits_[0] &= ~0x00002000u;
}
void RDFParameter::clear_test_input_path() {
  test_input_path_.ClearToDefaultNoArena(_default_test_input_path_);
  clear_has_test_input_path();
}
 const ::std::string& RDFParameter::test_input_path() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.test_input_path)
  return test_input_path_.GetNoArena(_default_test_input_path_);
}
 void RDFParameter::set_test_input_path(const ::std::string& value) {
  set_has_test_input_path();
  test_input_path_.SetNoArena(_default_test_input_path_, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.test_input_path)
}
 void RDFParameter::set_test_input_path(const char* value) {
  set_has_test_input_path();
  test_input_path_.SetNoArena(_default_test_input_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rdf.RDFParameter.test_input_path)
}
 void RDFParameter::set_test_input_path(const char* value, size_t size) {
  set_has_test_input_path();
  test_input_path_.SetNoArena(_default_test_input_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rdf.RDFParameter.test_input_path)
}
 ::std::string* RDFParameter::mutable_test_input_path() {
  set_has_test_input_path();
  // @@protoc_insertion_point(field_mutable:rdf.RDFParameter.test_input_path)
  return test_input_path_.MutableNoArena(_default_test_input_path_);
}
 ::std::string* RDFParameter::release_test_input_path() {
  // @@protoc_insertion_point(field_release:rdf.RDFParameter.test_input_path)
  clear_has_test_input_path();
  return test_input_path_.ReleaseNoArena(_default_test_input_path_);
}
 void RDFParameter::set_allocated_test_input_path(::std::string* test_input_path) {
  if (test_input_path != NULL) {
    set_has_test_input_path();
  } else {
    clear_has_test_input_path();
  }
  test_input_path_.SetAllocatedNoArena(_default_test_input_path_, test_input_path);
  // @@protoc_insertion_point(field_set_allocated:rdf.RDFParameter.test_input_path)
}

// optional string test_output_path = 15 [default = "./test_new_data"];
bool RDFParameter::has_test_output_path() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RDFParameter::set_has_test_output_path() {
  _has_bits_[0] |= 0x00004000u;
}
void RDFParameter::clear_has_test_output_path() {
  _has_bits_[0] &= ~0x00004000u;
}
void RDFParameter::clear_test_output_path() {
  test_output_path_.ClearToDefaultNoArena(_default_test_output_path_);
  clear_has_test_output_path();
}
 const ::std::string& RDFParameter::test_output_path() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.test_output_path)
  return test_output_path_.GetNoArena(_default_test_output_path_);
}
 void RDFParameter::set_test_output_path(const ::std::string& value) {
  set_has_test_output_path();
  test_output_path_.SetNoArena(_default_test_output_path_, value);
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.test_output_path)
}
 void RDFParameter::set_test_output_path(const char* value) {
  set_has_test_output_path();
  test_output_path_.SetNoArena(_default_test_output_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rdf.RDFParameter.test_output_path)
}
 void RDFParameter::set_test_output_path(const char* value, size_t size) {
  set_has_test_output_path();
  test_output_path_.SetNoArena(_default_test_output_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rdf.RDFParameter.test_output_path)
}
 ::std::string* RDFParameter::mutable_test_output_path() {
  set_has_test_output_path();
  // @@protoc_insertion_point(field_mutable:rdf.RDFParameter.test_output_path)
  return test_output_path_.MutableNoArena(_default_test_output_path_);
}
 ::std::string* RDFParameter::release_test_output_path() {
  // @@protoc_insertion_point(field_release:rdf.RDFParameter.test_output_path)
  clear_has_test_output_path();
  return test_output_path_.ReleaseNoArena(_default_test_output_path_);
}
 void RDFParameter::set_allocated_test_output_path(::std::string* test_output_path) {
  if (test_output_path != NULL) {
    set_has_test_output_path();
  } else {
    clear_has_test_output_path();
  }
  test_output_path_.SetAllocatedNoArena(_default_test_output_path_, test_output_path);
  // @@protoc_insertion_point(field_set_allocated:rdf.RDFParameter.test_output_path)
}

// optional float min_prob = 16 [default = 0.5];
bool RDFParameter::has_min_prob() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RDFParameter::set_has_min_prob() {
  _has_bits_[0] |= 0x00008000u;
}
void RDFParameter::clear_has_min_prob() {
  _has_bits_[0] &= ~0x00008000u;
}
void RDFParameter::clear_min_prob() {
  min_prob_ = 0.5f;
  clear_has_min_prob();
}
 float RDFParameter::min_prob() const {
  // @@protoc_insertion_point(field_get:rdf.RDFParameter.min_prob)
  return min_prob_;
}
 void RDFParameter::set_min_prob(float value) {
  set_has_min_prob();
  min_prob_ = value;
  // @@protoc_insertion_point(field_set:rdf.RDFParameter.min_prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rdf

// @@protoc_insertion_point(global_scope)
